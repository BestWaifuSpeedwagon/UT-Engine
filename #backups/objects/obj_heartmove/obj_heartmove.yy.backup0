// 2020-12-28 03:11:50
#event properties (no comments/etc. here are saved)
parent_index = -1;
sprite_index = spr_heart;
uses_physics = false;

#event create Variables
color = RED;

x = Box.cx;
y = Box.cy;

inv = 0; //Invicibility time
visible = false;

canMove = true;
shiftFactor = 1; //Becomes 0.5 when shift is on

customFunc = NULL; //Will be run for specific colors

//BLUE
onGround = true;

velY = 0;
gravityDir = pi/2; //Down by default

slam = false; //SLAM DUNK when you touch box

/// @param {obj_attack} _atk
function applyDamage(_atk)
{
	var moved = (xprevious != x || yprevious != y);
	
	
	if(_atk.turnIntoColor) color = _atk.color;
	
	//Don't apply damage if colors don't matchup
	if(_atk.color == AQUA && !moved || _atk.color == ORANGE && moved) return;
		
	audio_play_sound(snd_hurt1, 1, false);
	
	obj_stat.hp -= _atk.damage;
	if(obj_soul.karma) obj_soul.kr++;
	
	inv = room_speed/2;
	
	if(_atk.destroy) instance_destroy(_atk);
}

function changeColor(_color)
{
	if(color == _color) return; //If color is already color
	
	audio_play_sound(snd_bell, 0, false);
	color = _color;
}

#event step Collision
if(visible && (inv <= 0 || obj_soul.karma))
{
	var _atkCount = instance_number(obj_attack);
	for(i = 0; i < _atkCount; i++)
	{
		var _atk = instance_find(obj_attack, i);
	
		if(!_atk.collision) continue; //No need to check if collision is deactivated
		
		if(_atk.boundingAmount > 1)
		{
			var _colOccured = false;
			
			//Check over every bounding box and break if a collision happen
			for(j = 0; j < _atk.boundingAmount; j++)
			{
				//Smart operators will check if color is AQUA then if it's already on, and only then for collision 
				canMove = color != AQUA || canMove || _atk.bounding[@ j].checkCircle(x, y, 32);
				
				//Can't have a collision if you're not close to any
				if(canMove && _atk.bounding[@ j].checkPoint(x, y))
				{
					applyDamage(_atk);
					_colOccured = true;
					break; //Break out of bounding box loop if collision happened
				}
			}
			
			if(_colOccured) break; //Break out of attacks loop if collision happened
		}
		else
		{
			canMove = color != AQUA || canMove || _atk.bounding.checkCircle(x, y, 32);
			
			if(canMove && _atk.bounding.checkPoint(x, y))
			{
				applyDamage(_atk);
				break;
			}
		}
	}
}
else inv--;

#event step_begin Movement
#region Movement
shiftFactor = keyboard_check(ord("X")) ? .5 : 1;

var upK    = vk_up   ,
	downK  = vk_down ,
	leftK  = vk_left ,
	rightK = vk_right,
	jumpK  = vk_up   ;
gravityDir = sanitizeAngle(gravityDir);

if(gravityDir < pi/2)
{
	upK = vk_up;
	downK = vk_down;
	jumpK = vk_left;
}
else if(gravityDir < pi)
{
	jumpK = vk_up;
	leftK = vk_left;
	rightK = vk_right;
}
else if(gravityDir < pi*1.5)
{
	upK = vk_up;
	downK = vk_down;
	jumpK = vk_right;
}
else
{
	jumpK = vk_down;
	leftK = vk_left;
	rightK = vk_right;
}

if(visible && canMove)
{
	switch(color)
	{
		case AQUA:
		case RED:
			var hspd = keyboard_check(rightK) - keyboard_check(leftK),
				vspd = keyboard_check(downK) - keyboard_check(upK);
		
			x += hspd*3*shiftFactor;
			y += vspd*3*shiftFactor;
			break;
		case BLUE: //https://www.reddit.com/r/Underminers/comments/3yq1nn/physics_for_blue_soul/
			//if(onGround) velY = max(0, velY);
			
			var hspd = keyboard_check(rightK) - keyboard_check(leftK),
				vspd = keyboard_check(downK) - keyboard_check(upK);
			
			if(onGround && keyboard_check_pressed(jumpK)) velY = -6/2;
			
			if(velY <= -4/2) velY += 0.2/4;
			else if(velY <= -1/2) velY += 0.5/4;
			else if(velY <= -0.5/2) velY += 0.2/4;
			else if(velY < 8/2) velY += 0.6/4;
				
			if(keyboard_check_released(jumpK)) velY = max(velY, -1/2);
			
			var __cos = cos(gravityDir),
				__sin = sin(gravityDir);
			
			x += __cos*velY + abs(__sin)*hspd*3*shiftFactor;
			y += __sin*velY + abs(__cos)*vspd*3*shiftFactor;
			break;
	}
}

///TODO : Add rotation of box
x = median(x, Box.x+10, Box.x2-10); //Sprite width/height + box thickness
y = median(y, Box.y+10, Box.y2-10);

switch(color)
{
	case AQUA:
		canMove = false; //Reset to false
		break;
	case BLUE:
		//Need to check after clamp
		var maxVelY = max(velY, 1);
		
		onGround = line_intersects_rectangle(x, y, x+cos(gravityDir)*maxVelY, y+sin(gravityDir)*maxVelY, Box.x+9, Box.y+9, Box.x2-9, Box.y2-9);
		
		if(slam && onGround)
		{
			screenShake(10);
			audio_play_sound(snd_impact, 3, false);
			
			slam = false;
		}
		
		canMove = true;
		break;
	default:
		canMove = true;
		break;
}

#endregion

#event draw Draw myself
var _rot = 0;
switch(color)
{
	case AQUA:
		draw_set_color(canMove ? c_lime : c_white);
		draw_circle(x, y, 32, true);
		break;
	case BLUE:
		_rot = -radtodeg(gravityDir)+90;
		break;
}

draw_sprite_ext(sprite_index, inv % 20 < 10 ? 0 : 1, x, y, 1, 1, _rot, color, 1.0); //1 frame on 2 every 6 step