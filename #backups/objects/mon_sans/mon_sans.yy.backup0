// 2020-12-16 19:36:41
#event properties (no comments/etc. here are saved)
parent_index = obj_monster;
sprite_index = spr_sansb_face;
uses_physics = false;

#event create Properties
event_inherited(); //Inherit all variables of parent

maxHp = 1;
hp = 1;
name = "Sans";
def = 1000;

dodge = true;

text = [ "* You feel like your going to\n  have a bad time." ];

acts = [
	new Act("Check", [
		"* SANS - 1 ATK 1 DEF{12}\n* The easiest ennemy.",
		"* Can't keep dodging forever.{12}\n* Keep attacking."
	], NULL),
]; 

attacks = [ atkp_sans1, atkp_sans2, atkp_sans3, atkp_sans4, atkp_sans5 ];
attackOrder = function(roundType) //Determine order based on current count
{
	return attacks[fightCount];
}

y = 200;
width = 60;
height = 180;

var _bx = x + width/2 + 10,
	_by = y - height/2;

speechs = [
	new Speech( ["what ?{20}\nyou think i'm just gonna stand there and take it ?"], fnt_sans, snd_txtsans, spr_blconwdshrt, true, _bx, _by ),
	new Speech( [
		"our reports showed a massive anomaly in the timespace continuum.",
		"timelines jumping left and right,{20} stopping and starting..."
	], fnt_sans, snd_txtsans, spr_blconwdshrt, true, _bx, _by ),
	new Speech( ["until suddenly,{20} everything ends."], fnt_sans, snd_txtsans, spr_blconwdshrt, true, _bx, _by ),
	new Speech( ["heh heh heh...{30} that's your fault, isn't it?"], fnt_sans, snd_txtsans, spr_blconwdshrt, true, _bx, _by ),
	
];
speechOrder = function(roundType)
{
	return NULL;
	if(roundType == FIGHT) return speechs[fightCount];
	
}

bodyChannelX = animcurve_get_channel(ac_sans_body, 0);
bodyChannelY = animcurve_get_channel(ac_sans_body, 1);

bodySprite = spr_sansb_torso;
bodyImage = 0;

bodyState = 0;
bodyX = 0;
bodyY = 0;

headSprite = spr_sansb_face;
headImage = 0;

function changeSprite(part, sprite, image)
{
	variable_instance_set(id, part + "Sprite", sprite);
	variable_instance_set(id, part + "Image", image);
}

headY = 0;

image_speed = 0.1;

xpAmount = 100;
gAmountFight = 0;
gAmountSpare = 0;

#event step Animation
// Inherit the parent event
event_inherited();

var _time = oscillate(0, 1, frac(current_time / 2500 ));

switch(bodyState)
{
	case 0:
		bodyX = animcurve_channel_evaluate(bodyChannelX, _time);
		bodyY = animcurve_channel_evaluate(bodyChannelY, _time);
		headY = sin(current_time / 318.3 * 3);
		break;
	case 1:
		bodyX = 0;
		bodyY = 0;
		headY = 0;
		break;
}

if(bodySprite != spr_sansb_torso)
{
	bodyImage += 0.1;
	
	if(bodyImage >= sprite_get_number(bodySprite)-1)
	{
		bodySprite = spr_sansb_torso;
		bodyImage = 0;
	}
}

if(headSprite != spr_sansb_face)
{
	headImage += 0.1;
	
	if(headImage >= sprite_get_number(headSprite))
	{
		headImage = 0;
	}
}

#event draw Draw myself
surface_set_target(monsterSurf);

if(killed)
{
	shader_set(shd_dust);
	shader_set_uniform_f(u_u.dust_fraction, fraction);
	shader_set_uniform_f(u_u.dust_y, y - height);
	shader_set_uniform_f(u_u.dust_height, height);
	
	draw_sprite(spr_looxhurt, 0, x, y);
	
	shader_reset();
}
else
{
	if(spared)
	{
		draw_sprite_ext(spr_looxhurt, 0, x, y, 1, 1, 0, c_white, 0.5);
	}
	else
	{
		if(bodySprite != spr_sansb_torso)
		{
			draw_sprite_ext(bodySprite, bodyImage, x, y-46, 2, 2, 0, c_white, 1); //Always elative to torso
		}
		else
		{
			draw_sprite_ext(spr_sansb_legs, 0, x, y, 2, 2, 0, c_white, 1);
			draw_sprite_ext(spr_sansb_torso, bodyImage, x + bodyX, y-46 + bodyY, 2, 2, 0, c_white, 1);
		}
		draw_sprite_ext(headSprite, headImage, x + bodyX, y-38-50 + bodyY + headY, 2, 2, 0, c_white, 1);
	}
}

surface_reset_target();