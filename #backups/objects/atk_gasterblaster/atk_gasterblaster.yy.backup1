// 2020-12-27 19:09:55
#event properties (no comments/etc. here are saved)
parent_index = obj_attack;
sprite_index = spr_gasterblaster_charge;
uses_physics = false;

#event create Creation
// /!\ Use the gaster blaster function to create one !

// Inherit the parent event
event_inherited();

audio_play_sound(snd_gaster_blaster, 0, false);

passthrough = true;
damage = 1; //K A R M A

collision = false; //No collision at first, and removed when fading away
destroy = false;

wantedX = ct_argument.wantedX;
wantedY = ct_argument.wantedY;
wantedDir = ct_argument.wantedDir;
image_angle = radtodeg(wantedDir); //180 degrees from wanted dir

timer = ct_argument.timer; //Time before it fires
fadeOut = ct_argument.fadeOut; //Time for it to start fading out

//image_xscale; Set later
//image_yscale;

t = 0;

size = 0; //Size of the blast, from 0 to 1, relative to yscale
alpha = 1; //For fading away at the end

vel = 0; //Accelerate when the beam is fired

image_speed = 0;

bounding.relative = false;

#event step Decrease timer, then fire

image_angle = lerp(image_angle, -radtodeg(wantedDir), .1);

if(timer > 0)
{
	x += (wantedX-x)/10;
	y += (wantedY-y)/10;
	
	timer--;
	
	
	if(timer <= 40) image_index = floor(1 - timer/40)*4;
}
else if(timer == 0)
{
	audio_play_sound(snd_gaster_blast, 0, false);
	
	screenShake(max(image_xscale*image_yscale, 5));
	
	collision = true;
	
	sprite_index = spr_gasterblaster_fire;
	image_speed = 0.1;
	
	timer = -1;
}
else if(timer > -fadeOut)
{
	size = min(size+.2, 1);
	timer--;
}
else
{
	alpha -= 4/room_speed;
	size = sqr(alpha);
	
	collision = false;
	
	if(alpha <= 0)
	{
		instance_destroy();
	}
}

if(timer < 0)
{
	//Set bounding box
	bounding.p1.set(x, y - 32*image_yscale*size);
	bounding.p2.set(x+2000, y + 32*image_yscale*size);
	bounding.o.set(x, y);
	bounding.theta = wantedDir;
	//Increase size / Move
	if(x > -sprite_width && y > -sprite_height && x < 640+sprite_width && y < 480+sprite_height)
	{
		vel -= 0.5;
		x += cos(wantedDir)*vel;
		y += sin(wantedDir)*vel;
	}
}

t += 1/room_speed;

#event draw Draw myself (not affected by shaders)
if(size > 0)
{
	var oscillation = (sin(t*pi*8)+1)/2 * 0.25 + 1; //0.25 second
	
	var __cos = cos(wantedDir),
		__sin = sin(wantedDir);
	
	var blastX = x + __cos*39*image_xscale,
		blastY = y + __sin*39*image_xscale;
	
	draw_sprite_ext(spr_gasterblaster_blast, 0, blastX, blastY, image_xscale, size*image_yscale, image_angle, color, alpha);
	
	draw_set_alpha(alpha);
	draw_set_color(color);
	drawRectangleRotated(blastX, blastY-32*image_yscale*size * oscillation, blastX+2000, blastY+32*image_yscale*size * oscillation, blastX, blastY, wantedDir, false, false);
	draw_set_alpha(1);
}

draw_self();