// 2020-12-28 02:57:12
#event properties (no comments/etc. here are saved)
parent_index = -1;
sprite_index = spr_heart;
uses_physics = false;

#event create Ins√©rez la description ici
//UI
state = 0;
substate = [ NULL, NULL ]; //Substate, subsubstate, subsubsubstate, etc...

inBattle = false;

roundType = NULL; //Wether you attacked, acted, eated or spared this round

monsterSurf = surface_create(obj_stat.width*2, obj_stat.height*2);

waitingFor = 
{
	dialogue: false, //True when your waiting for the dialogue to finish
	damage: false,	 //Waiting for the hit, then the slice then the damage
	speech: false    //Waiting for the monster to stop talking
}

box = 
{
	x: 32.5,
	y: 248,
	w: 575,
	h: 140,
	fw: 575, //Wanted W
	fh: 140, //Wanted H
	spdSize: .1,
	spdPos: .1,
	
	//Free Pose
	freePos: false,
	fx: 32.5, //Wanted X
	fy: 248,  //Wanted Y
	o: new Point(.5, .5), //Origin from 0 to 1
	
	//Convenience
	cx: 320, 
	cy: 318,
	x2: 607.5,
	y2: 388,
	fx1: 32.5,
	fy1: 32.5,
	fx2: 320,
	fy2: 318,
	fcx: 607.5,
	fcy: 388,
	
	
	resize: function(_w, _h, _amount)
	{
		_amount ??= 0;
		
		fw = _w;
		fh = _h;
		
		w = lerp(w, fw, _amount);
		h = lerp(h, fh, _amount);
		
		calculate();
	},
	move: function(_x, _y, _amount)
	{
		_amount ??= 0;
		
		freePos = true;
		fx = _x;
		fy = _y;
		
		x = lerp(x, fx - fw*o.x, _amount);
		y = lerp(y, fy - fh*o.y, _amount);
		
		calculate();
	},
	setOrigin: function(_x, _y)
	{
		o.set(_x, _y);
		
		move(x + w*_x, y + h*_y, 1);
	},
	calculate: function()
	{
		x2 = x + w;
		y2 = y + h;
	
		cx = x + w/2;
		cy = y + h/2;
		
		fx2 = fx - fw*(o.x-1);
		fy2 = fy - fh*(o.y-1);
		
		fx1 = fx2 - fw;
		fy1 = fy2 - fh;
		
		fcx = (fx1+fx2)/2;
		fcy = (fy1+fy2)/2;
	}
}

#region Battle Variables
monster = ct_argument.monster; //Array of obj_monster instances
monsterAmount = array_length(monster);

krCount = 0;
karma = ct_argument.karma;
kr = 0;

currentAttack = undefined;
time = 0;

instance_create_layer(0, 0, "heartmove", obj_heartmove);

//Other
originalRoom = ct_argument.originalRoom;

gAmount = 0;
xpAmount = 0;

won = false;

#endregion
#region Dialogue
function getDialogue()
{
	var _mon = monster[ irandom(monsterAmount-1) ];
	
	return _mon.text[ irandom(array_length(_mon.text)-1) ];
}

dialogue = new Dialogue( [ getDialogue() ], false, snd_text );
dialogue.passable = false;

dialogue.x = box.x + 16;
dialogue.y = box.y + 21;

currentSpeech = NULL;
#endregion
#region Utilities

function startSpeech() //Will then start combat
{
	if(monsterAmount <= 0) return startCombat(); //If there is no monster left, directly start combat
	
	var _mon = monster[ irandom(monsterAmount-1) ];
	
	currentSpeech = _mon.speechOrder(roundType);
	
	if(currentSpeech == NULL) return startCombat(); //If no speech was given, directly start combat
	
	if(currentSpeech.wait) waitingFor.speech = true;
	else startCombat();
}

function startCombat() //Start the combat event
{
	if(monsterAmount <= 0) //Won
	{
		var _t =  "You won !{9}\nYou gained " + string(gAmount) + "G and " +  string(xpAmount) + " EXP !";
		
		obj_stat.xp += xpAmount;
		obj_stat.g += gAmount;
		
		dialogue.messages = [_t];
		dialogue.reset();
		
		audio_stop_all();
		
		won = true;
		return;
	}
	
	inBattle = true;
	dialogue.messages = [ getDialogue() ];
	dialogue.reset();
	
	time = 0;
	currentAttack = monster[ irandom(monsterAmount-1) ].attackOrder(roundType);
	instance_create_depth(0, 0, 0, currentAttack);
	
	//After selection, apply the count
	forEach(monster, function(m){ m.count++; });
	
	switch(roundType)
	{
		case FIGHT:
			monster[substate[0]].fightCount++;
			break;
		case ACT:
			monster[substate[0]].actCount++;
			break;
		case ITEM:
			forEach(monster, function(m){ m.itemCount++; });
			break;
		case SPARE:
			forEach(monster, function(m){ m.spareCount++; });
			break;
	}
	
	substate[0] = NULL;
	substate[1] = NULL;
	
	roundType = NULL;
	
	obj_heartmove.visible = true;
	obj_heartmove.x = box.cx;
	obj_heartmove.y = box.cy;
}

function allMonstersSparable()
{
	for(i = 0; i < monsterAmount; i++)
	{
		if(!monster[i].spare) return false;
	}
	
	return true;
}

#endregion

#event step Move heart around or something idunno

var _z = keyboard_check_pressed(ord("Z"));
var _x = keyboard_check_pressed(ord("X"));

var _hKey = keyboard_check_pressed(vk_right)-keyboard_check_pressed(vk_left),
	_vKey = keyboard_check_pressed(vk_down)-keyboard_check_pressed(vk_up);

#region Selection
if(won)
{
	dialogue.passable = true;
	if(dialogue.update())
	{
		surface_free(monsterSurf);
		room = originalRoom;
	}
}
else if(!inBattle)
{
	if(waitingFor.dialogue)
	{
		dialogue.passable = true;
		if(dialogue.update())
		{
			dialogue.reset();
			dialogue.passable = false;
			waitingFor.dialogue = false;
			startSpeech();
		}
	}
	else if(!waitingFor.damage && !waitingFor.speech)
	{
		if(_z) audio_play_sound(snd_select, 1, false);
		if(_hKey != 0 || _vKey != 0) audio_play_sound(snd_squeak, 1, false);
		
		if(substate[0] == NULL)
		{
			dialogue.update();
			
			state += _hKey;
			state = clamp(state, 0, 3);
		
			if(_z) substate[0] = 0;
		}
		else
		{
			if(substate[1] == NULL)
			{
				switch(state)
				{
					case FIGHT:
						substate[0] += _vKey;
						substate[0] = clamp(substate[0], 0, monsterAmount-1);
					
						if(_z) 
						{
							roundType = FIGHT;
							
							waitingFor.damage = true;
							ct_argument = 
							{
								monster: substate[0]
							}
							instance_create_layer(0, 0, "Instances", obj_target);
						}
						break;
					case ACT:
						substate[0] += _vKey;
						substate[0] = clamp(substate[0], 0, monsterAmount-1);
						
						if(_z) substate[1] = 0;
						break;
					case ITEM:
						if(ds_list_size(obj_stat.items) <= 0) substate[0] = NULL;
					
						//Horizontal + Vertical choosing
						substate[0] += _hKey + _vKey*2;
						substate[0] = clamp(substate[0], 0, array_length(obj_stat.items));
					
						if(_z)
						{
							roundType = ITEM;
							
							var _item = obj_stat.items[| substate[0]];
							
							audio_play_sound(_item.sound, 3, false);
							
							obj_stat.hp += _item.effect;
							obj_stat.hp = min(obj_stat.hp, obj_stat.maxHp);
							
							var _m;
							if(obj_stat.hp == obj_stat.maxHp) _m = "Your HP maxed out !";
							else _m = "You recovered " + string(_item.effect) + " HP.";
							
							dialogue.messages = [ "* You eat the " + _item.name + ".{30}\n* " + _m ];
							dialogue.reset();
							
							ds_list_delete(obj_stat.items, substate[0]);
							
							waitingFor.dialogue = true;
						}
						break;
					case SPARE:
						if(_z)
						{
							roundType = SPARE;
							
							forEach(monster,
								function(m, i)
								{
									if(m.spare)
									{
										if(!audio_is_playing(snd_vaporized)) audio_play_sound(snd_vaporized, 3, false);
										gAmount += m.gAmountSpare;
										
										m.spared = true;
										array_delete(monster, i, 1);
										
										i--;
										monsterAmount--;
									}
									else
									{
										monster[i].spareCount++;
									}
								}
							);
							
							startSpeech();
						}
						break;
				}
			
				if(_x)
				{
					dialogue.reset();
					substate[0] = NULL;
				}
			}
			else
			{
				switch(state)
				{
					case ACT:
						substate[1] += _hKey + _vKey*2;
						substate[1] = clamp(substate[1], 0, array_length(monster[substate[0]].acts));
						
						if(_z)
						{
							roundType = ACT;
							
							var _act = monster[substate[0]].acts[substate[1]];
							
							if(_act.effect)
							{
								with(monster[substate[0]])
								{
									_act.effect();
								}
							}
							
							dialogue.messages = _act.text;
							dialogue.reset();
							waitingFor.dialogue = true;
						}
						break;
				}
			
			
				if(_x) substate[1] = NULL;
			}
		}
	}
}
else
{
	if(!instance_exists(currentAttack))
	{
		box.freePos = false;
		box.resize(575, 140);
		
		inBattle = false;
		
		obj_heartmove.visible = false;
		
		with(obj_attack)
		{
			instance_destroy();
		}
	}
	time++;
}
#endregion
#region Speech

if(currentSpeech != NULL)
{
	if(currentSpeech.dialogue.update())
	{
		if(currentSpeech.wait) startCombat(); //If you didn't wait for the speech, the combat is already started
		
		currentSpeech.dialogue.reset();
		currentSpeech = NULL;
		waitingFor.speech = false;
	}
}

#endregion
#region Box

with(box)
{
	w = lerp(w, fw, spdSize);
	h = lerp(h, fh, spdSize);

	if(freePos)
	{
		//o.x = lerp(o.x, fo.x, .1);
		//o.y = lerp(o.y, fo.y, .1);
	
		x = lerp(x, fx - fw*o.x, spdPos);
		y = lerp(y, fy - fh*o.y, spdPos);
	}
	else
	{
		x = 320 - w/2;
		y = min(388, 320 + h/2) - h;
	
		fx = x + w*o.x;
		fy = y + h*o.y;
	}
	
	calculate();
}
#endregion
#region Health / Karma

if(karma)
{
	var _krTimer = ceil(power(1.25, -kr)*120);
	
	if(_krTimer < krCount) krCount = _krTimer;
	
	if(krCount > 0) krCount--;
	else
	{
		if(kr > 0)
		{
			kr--;
			krCount = _krTimer;
		}
	}
	
	if(obj_stat.hp <= 0)
	{
		if(kr > 0)
		{
			obj_stat.hp = 1;
			kr-=2; //Additional damage remove karma
		}
		else instance_create_depth(0, 0, 0, obj_gameover);
	}
}
else
{
	if(obj_stat.hp <= 0) instance_create_depth(0, 0, 0, obj_gameover);
}
#endregion
#region Surfaces
if(!surface_exists(monsterSurf)) monsterSurf = surface_create(obj_stat.width*2, obj_stat.height*2);

surface_set_target(monsterSurf);
draw_clear_alpha(c_black, 0);
surface_reset_target();

#endregion

#event draw_gui Draw the *burp* thing
#region Heart / Text
draw_set_color(c_white);
draw_set_font(fnt_dialogue);

if(won)
{
	dialogue.draw();
}
else if(!inBattle)
{
	if(waitingFor.dialogue)
	{
		dialogue.draw();
	}
	else if(!waitingFor.damage && !waitingFor.speech)
	{
		var _hx; //Heart x
		var _hy; //Heart y
		
		if(substate[0] == NULL)
		{
			dialogue.draw();
		
			switch(state)
			{
				case FIGHT:
					_hx = 33+16;
					break;
				case ACT:
					_hx = 186+16;
					break;
				case ITEM:
					_hx = 346+16;
					break;
				case SPARE:
					_hx = 501+16;
					break;
			}
			_hy = 453;
		}
		else
		{
			if(substate[1] == NULL)
			{
				switch(state)
				{
					case FIGHT:
						var _maxw = 0;
						
						for(i = 0; i < monsterAmount; i++)
						{
							draw_text(box.x + 64, box.y + 21 + 32*i, "* " + monster[i].name);
							
							_maxw = max(_maxw, string_width("* " + monster[i].name));
						}
						
						for(i = 0; i < monsterAmount; i++)
						{
							var _x = box.x + 86 + _maxw,
								_y = box.y + 21 + 32*i;
							
							draw_healthbar(_x, _y+6, _x+80, _y+26, monster[i].hp/monster[i].maxHp * 100, c_red, c_lime, c_lime, 0, true, false);
						}
						_hx = box.x + 40; //+ 64 - 16 - 8
						_hy = box.y + 37 + 32*substate[0];
						
						break;
					case ACT:
						for(i = 0; i < monsterAmount; i++)
						{
							draw_text(box.x + 64, box.y + 21 + 32*i, "* " + monster[i].name);
						}
						
						_hx = box.x + 40; //+ 64 - 16 - 8
						_hy = box.y + 37 + 32*substate[0];
						break;
					case ITEM:
						var _startItem = substate[0] - substate[0] % 4;
						var _endItem = min(_startItem+4, ds_list_size(obj_stat.items));
						
						_hx = box.x + 40 + (substate[0]%2 * box.w/2);
						_hy = box.y + 37 + ( (substate[0]+1)%4 > 2 ? 32 : 0 );
						
						for(i = _startItem; i < _endItem; i++)
						{
							var _x = box.x + 64 + (i%2 * box.w/2);
							var _y = box.y + 21 + ( (i+1)%4 > 2 ? 32 : 0 );
							
							draw_text(_x, _y, "* " + obj_stat.items[| i].name);
						}
						break;
					case SPARE:
						_hx = box.x + 40;
						_hy = box.y + 37;
						
						draw_set_color(allMonstersSparable() ? c_yellow : c_white);
						
						draw_text(box.x + 64, box.y + 21, "Spare");
						
						draw_set_color(c_white);
						break;
				}
			}
			else
			{
				switch(state)
				{
					case ACT:
						var _l = array_length( monster[substate[0]].acts );
						
						_hx = box.x + 40 + (substate[1]%2 * box.w/2);
						_hy = box.y + 37 + ( (substate[1]+1)%4 > 2 ? 32 : 0 );
						
						for(i = 0; i < _l; i++)
						{
							var _x = box.x + 64 + (i%2 * box.w/2);
							var _y = box.y + 21 + ( (i+1)%4 > 2 ? 32 : 0);
							
							draw_text(_x, _y, "* " + monster[substate[0]].acts[i].name);
						}
						break;
				}
			}
		}
		
		draw_sprite_ext(spr_heart, 0, _hx, _hy, 1, 1, 0, obj_heartmove.color, 1);
	}
}
#endregion
#region Box
draw_set_color(c_white);
with(box)
{
	for(i = 0; i < 4; i++)
		draw_rectangle(x + i, y + i, x2 - i, y2 - i, true);
}
#endregion
#region Speech

if(currentSpeech != NULL)
{
	currentSpeech.draw();
}

#endregion
#region HUD
//All of the hud is obscured by the box
shader_set(shd_insideOutside);
shader_set_uniform_i(u_u.insideOutside_inside, false);
shader_set_uniform_f(u_u.insideOutside_box, box.x, box.y, box.x2, box.y2);

draw_sprite(spr_fightbt, real(state == 0), 33, 431);
draw_sprite(spr_actbt, real(state == 1), 186, 431);
draw_sprite(spr_itembt, real(state == 2), 346, 431);
draw_sprite(spr_sparebt, real(state == 3), 501, 431);

draw_surface(monsterSurf, 0, 0);

draw_set_color(c_white);
draw_set_font(fnt_battle_hud);
draw_set_valign(fa_top);

var _x = 31;

draw_text(_x, 395, obj_stat.name);
_x += string_width(obj_stat.name)+30;

draw_text(_x, 395, "LV " + string(obj_stat.lv));
_x += 92;

draw_sprite(spr_hpname, 0, _x, 404);
_x += 31;

draw_set_color(c_red);
draw_rectangle(_x, 399, _x + obj_stat.maxHp*1.2, 419, false);

if(karma)
{
	draw_set_color(c_fuchsia);
	draw_rectangle(_x, 399, _x + (kr+obj_stat.hp)*1.2, 419, false);
}

draw_set_color(c_yellow);
draw_rectangle(_x, 399, _x + obj_stat.hp*1.2, 419, false);

_x += obj_stat.maxHp*1.2 + 9;

if(karma)
{
	draw_sprite(spr_krmeter, 0, _x, 404);
	_x += 40;
	
	draw_set_color(kr > 0 ? c_fuchsia : c_white);
}
else draw_set_color(c_white);

draw_text(_x, 395, string(obj_stat.hp+kr) + " / " + string(obj_stat.maxHp));
#endregion

shader_reset();