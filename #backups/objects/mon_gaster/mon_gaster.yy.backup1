// 2020-12-20 20:32:37
#event properties (no comments/etc. here are saved)
parent_index = obj_monster;
sprite_index = spr_gaster_body;
uses_physics = false;

#event create Properties
event_inherited(); //Inherit all variables of parent

maxHp = 1;
hp = 1;
name = "Gaster";
def = 1000;

dodge = true;

text = [ "* Your back is crawling on your\n  spine." ];

acts = [
	new Act("Check", [
		"* GASTER | 999 ATK -457 DEF{12}\n* The _-|-_|_- ennemy."
	], NULL),
]; 

attacks = [ atkp_gaster1, atkp_gaster2 ];//, atkp_gaster2, atkp_gaster3, atkp_gaster4, atkp_gaster5 ];
attackOrder = function(roundType) //Determine order based on current count
{
	return attacks[fightCount];
}

y = 200;
width = 140;
height = 180;

var _bx = x + width/2 + 10,
	_by = y - height/2;

speechs = [];
speechOrder = function(roundType)
{
	return NULL;
	if(roundType == FIGHT) return speechs[fightCount];
	
}

enum States
{
	gaster,
	sans
}

state = States.gaster;

sans = 
{
	bodyChannelX: animcurve_get_channel(ac_sans_body, 0),
	bodyChannelY: animcurve_get_channel(ac_sans_body, 1),
	
	bodySprite: spr_sansb_torso,
	bodyImage: 0,
	
	bodyState: 0,
	bodyX: 0,
	bodyY: 0,
	
	headSprite: spr_sansb_face,
	headImage: 0,
	
	changeSprite: function(part, sprite, image)
	{
		variable_struct_set(self, part + "Sprite", sprite);
		variable_struct_set(self, part + "Image", image);
	},
	
	headY: 0
}

gaster = 
{
	bodyScale: 1
}

hand1 = instance_create_layer(x - width, y - height/3*2, "Monsters", obj_gaster_hand);
hand2 = instance_create_layer(x + width, y - height/3*2, "Monsters", obj_gaster_hand);

function resetHandPos()
{
	hand1.go(x - width, y - height/3*2, 60, 0);
	hand2.go(x + width, y - height/3*2, 60, 0);
}

hand1.image_xscale = -1;

image_speed = 0.1;

xpAmount = 100;
gAmountFight = 0;
gAmountSpare = 0;

#event step Animation
// Inherit the parent event
event_inherited();

switch(state)
{
	case States.gaster:
		with(gaster)
		{
			bodyScale = (sin( current_time/2000 * pi + pi/2) + 1)/2 * .25 + .875; //Add pi/2 to start at ~1
			
		}
		break;
	case States.sans:
		with(sans)
		{
			var _time = oscillate(0, 1, frac(current_time / 2500 ));
			
			switch(bodyState)
			{
				case 0:
					bodyX = animcurve_channel_evaluate(bodyChannelX, _time);
					bodyY = animcurve_channel_evaluate(bodyChannelY, _time);
					headY = sin(current_time / 318.3 * 3);
					break;
				case 1:
					bodyX = 0;
					bodyY = 0;
					headY = 0;
					break;
			}
			
			if(bodySprite != spr_sansb_torso)
			{
				bodyImage += 0.1;
				
				if(bodyImage >= sprite_get_number(bodySprite)-1)
				{
					bodySprite = spr_sansb_torso;
					bodyImage = 0;
				}
			}
			
			if(headSprite != spr_sansb_face)
			{
				headImage += 0.1;
				
				if(headImage >= sprite_get_number(headSprite))
				{
					headImage = 0;
				}
			}
		}
		break;
}
#event draw Draw myself
surface_set_target(monsterSurf);

if(killed)
{
	shader_set(shd_dust);
	shader_set_uniform_f(u_u.dust_fraction, fraction);
	shader_set_uniform_f(u_u.dust_y, y - height);
	shader_set_uniform_f(u_u.dust_height, height);
	
	draw_sprite(spr_looxhurt, 0, x, y);
	
	shader_reset();
}
else
{
	switch(state)
	{
		case States.gaster:
			with(gaster)
			{
				draw_sprite_ext(spr_gaster_body, 0, other.x, other.y, 1, bodyScale, 0, c_white, 1);
			}
			draw_sprite_ext(hand1.sprite_index, hand1.image_index, hand1.x, hand1.y, hand1.image_xscale, 1, 0, c_white, 1);
			draw_sprite_ext(hand2.sprite_index, hand2.image_index, hand2.x, hand2.y, hand2.image_xscale, 1, 0, c_white, 1);
			break;
		case States.sans:
			with(sans)
			{
				if(bodySprite != spr_sansb_torso)
				{
					draw_sprite_ext(bodySprite, bodyImage, other.x, other.y-46, 2, 2, 0, c_white, 1); //Always elative to torso
				}
				else
				{
					draw_sprite_ext(spr_sansb_legs, 0, other.x, other.y, 2, 2, 0, c_white, 1);
					draw_sprite_ext(spr_sansb_torso, bodyImage, other.x + bodyX, other.y-46 + bodyY, 2, 2, 0, c_white, 1);
				}
				draw_sprite_ext(headSprite, headImage, other.x + bodyX, other.y-38-50 + bodyY + headY, 2, 2, 0, c_white, 1);
			}
			break;
	}
}

surface_reset_target();